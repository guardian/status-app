AWSTemplateFormatVersion: 2010-09-09
Description: status-app
Parameters:
  Stack:
    Description: Applied directly as a tag
    Type: String
  Stage:
    Description: Applied directly as a tag
    Type: String
    Default: PROD
  HostedZone:
    Description: >-
      DNS hosted zone for which A CNAME will be created. e.g. 'example.com'
      (note, no trailing full-stop) for status.example.com. Leave empty if you
      don't want to add a CNAME to the status app
    Type: String
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t4g.small
    ConstraintDescription: must be a valid EC2 instance type.
  VPC:
    Description: ID of the VPC onto which to launch the application
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Description: Subnets to use in VPC
    Type: 'List<AWS::EC2::Subnet::Id>'
  ImageId:
    Description: AMI ID
    Type: String
  AllowedIngressIps:
    Description: IP address range (CIDR) that access the site
    Type: String
    Default: 0.0.0.0/0
  SSLCertificateId:
    Description: SSL Certificate ID
    Type: String
Conditions:
  HasDNS: !Not
  - !Equals
    - !Ref HostedZone
    - ''
Resources:
  StatusAppRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              Resource: arn:aws:logs:*:*:*
        - PolicyName: s3Deploy
          PolicyDocument:
            Statement:
              Effect: Allow
              Action: s3:GetObject
              Resource:
                - arn:aws:s3::*:membership-dist/*
      ManagedPolicyArns:
      - !Sub arn:aws:iam::${AWS::AccountId}:policy/guardian-ec2-role-for-ssm
  StatusAppReadMetadataPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: StatusAppReadMetadataPolicy
      PolicyDocument:
        Statement:
        - Action:
          - 'ec2:describe*'
          - 'autoscaling:Describe*'
          - 'elasticloadbalancing:Describe*'
          - 'cloudwatch:Get*'
          - 'sqs:ListQueues'
          Effect: Allow
          Resource: '*'
      Roles:
      - !Ref StatusAppRole
  StatusAppReadConfigPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: StatusAppReadConfigPolicy
      PolicyDocument:
        Statement:
        - Action:
          - 'dynamodb:GetItem'
          Effect: Allow
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/StatusAppConfig'
      Roles:
      - !Ref StatusAppRole
  StatusAppInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
      - !Ref StatusAppRole
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Listeners:
      - LoadBalancerPort: 443
        InstancePort: 9000
        Protocol: HTTPS
        SSLCertificateId: !Sub 'arn:aws:acm:eu-west-1:${AWS::AccountId}:certificate/${SSLCertificateId}'
      CrossZone: 'true'
      HealthCheck:
        Target: 'HTTP:9000/management/healthcheck'
        HealthyThreshold: 2
        UnhealthyThreshold: 2
        Interval: 10
        Timeout: 5
      Subnets: !Ref Subnets
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
  AutoscalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1
      MaxSize: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LoadBalancerNames:
      - !Ref LoadBalancer
      Tags:
      - Key: Stack
        Value: !Ref Stack
        PropagateAtLaunch: 'true'
      - Key: App
        Value: status-app
        PropagateAtLaunch: 'true'
      - Key: Stage
        Value: !Ref Stage
        PropagateAtLaunch: 'true'
      - Key: Management
        Value: port=9000
        PropagateAtLaunch: 'true'
      - Key: Role
        Value: !Sub '${Stack}-status-app'
        PropagateAtLaunch: 'true'
      VPCZoneIdentifier: !Ref Subnets
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref ImageId
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      AssociatePublicIpAddress: true
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref StatusAppInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ev
          aws --region ${AWS::Region} s3 cp s3://membership-dist/${Stack}/${Stage}/status-app/status-app_1.0_all.deb .
          dpkg -i status-app_1.0_all.deb
          /opt/cloudwatch-logs/configure-logs application ${Stack} ${Stage} status-app /var/log/status-app/status-app.log
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Open up HTTP access to load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref 'AllowedIngressIps'
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: status app instance
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'AllowedIngressIps'
  ConfigTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: StatusAppConfig
      KeySchema:
      - AttributeName: key
        KeyType: HASH
      AttributeDefinitions:
      - AttributeName: key
        AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      Tags:
        # We are opting out of backups for this table because we believe it to be non-critical
        - Key: devx-backup-enabled
          Value: false
  MainDnsEntry:
    Type: 'AWS::Route53::RecordSet'
    Condition: HasDNS
    Properties:
      HostedZoneName: !Sub '${HostedZone}.'
      Comment: CNAME for status app
      Name: !Sub 'status.${HostedZone}'
      Type: CNAME
      TTL: '900'
      ResourceRecords:
      - !GetAtt
        - LoadBalancer
        - DNSName
Outputs:
  SecurityGroup:
    Description: Security group to grant access to status app
    Value: !Ref InstanceSecurityGroup
